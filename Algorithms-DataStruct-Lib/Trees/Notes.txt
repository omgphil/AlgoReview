A tree can be abstract datatype (ADT) and a data structure
Hierarchy data structure with nodes
A tree is a special case of a graph.
And example is a Linked List
Elements with no children are called Leaf Nodes, Links are called edges
Every tree consists of one or more subtrees
Notes, Tree can’t have cyclic paths (circle path)
Depth is number of edges in a path
Height is the longest path to a leaf

Binary Tree
•	Each node has 0, 1 or 2 children
•	Left child and Right child
•	Binary Search tree is used in practice

Left child contains nodes less than the parent, right is greater or equal
•	Left child < Parent 
•	Right child > Parent
•	Left subtree contains only values that are less than the Parent
•	Right subtree contains only values that are greater than the Parent
•	Binary Search gives log(n) for insert, delete and retrieval

4 ways to traverse a tree
-	Level: go through every level.
-	In-order: go left first, then root, then to the right. 
-	Pre-order: Visit the root of every subtree first.
-	Post-order: Visit the root of every subtree last.

Removal (3 Cases)
-	Node is a Leaf
-	Node has one child
-	Node has 2 children: Choose replacement node from left or right subtree
	o	Case: Take the max from left subtree and the replacement has no children
	o	Case: Take the max from left subtree and the replacement has left children
	o	Case: Take the min from the right subtree and replacement has no children
	o	Case: Take the min from the right subtree and replacement has right children

------

Heap
-	Special case of a binary tree
-	Binary should be complete (every level is filled)
-	Max Heap: every parent node >= children (Max is the root)
-	Min Heap: every parent node <= children (Min is the root)
-	Heaps are implemented as arrays
-	Heapifying – the process of converting a binary tree into a heap
-	No condition between siblings

Heaps and Arrays
-	We can store heaps as arrays
-	Root goes to array [0]
-	Traversing, we put values from left to right at each level sequentially

For the node @ array [i]
Left = 2i + 1
Right = 2i + 2
Parent = (i-1) / 2

Insertion into Heap: Theory
-	Add new item to end of array
-	Then heapify
	o	Compare new item with parent
	o	If item > parent – swap
	o	Repeat until order is defined

